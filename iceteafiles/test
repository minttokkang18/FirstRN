자바스크립트

vscode eclipse nodejs 등
 
변수

name = "mike"; <- ; 기억
age = 30;

' " 항상 따음표를 넣을걸 안넣을시 에러

일부는 reserved words에 있기에 조심

alert() <- 경고나 알림
console log <- 콘솔창 키기

let 변하는 값 변수 

const 절대 바뀌지 않는 상수 수정 불가 (파이 최대값 생일 등)
대문자로 하는게 좋음

변수 숫자 $, _ 사용가능
첫글자 숫자 불가능, 예약어 사용 x, 상수는 대문자로, 변수명은 읽기 쉽게 지정

자료형

" ' ` 

숫자형

boolean true false 논리 연산자

typeof
typeof null;
null = x 객체가아님

alert() 메세지 띄움 
prompt() 값을 입력받을떄 사용 
confirm() 확인받을때 사용

단점 스크립트 일시 정지, 스타일링 불가능

형변환
Sting() 문자형
Number() 숫자형
Boolean() 불린형

prompt 문자형 90+80 = 170이 아닌 9080 문자로 더함
숫자가 아니라도 /2 같은 나누기는 그대로 반영 <- 자동 형변환

명시적 형변환을 해야함

String() 문자형으로 변환
Number() 사용자가 문자열로 하였을때 숫자형으로 변경
Boolean() fasle 숫자 0 빈문자열 "  null undefined NaN 불린형으로 변환

Number(null) // 0 Number(undefined) // NaN

Boolean(0) // false
Boolean("0") // true

Boolean("") // false
Boolean(' ') // true

연산자

+ - * / % 

비교 연산자, 조건문

< > <= >= == != 부등호를 사용

=== <- type까지 비교 일치 연산자 동등연산자 보다 낫다

a = 3 할당 (a에 3을 넣어줌)
a == 3 (a가 3인가)
a != 3 (a는 3이랑 다른가)

// true or false

조건문

if문
()평가하고 true / false

else false일떄 실행

논리 연산자

|| (OR) 여러개 중 하나라도 true 일시 true
&& (AND) 모든값이 true 면 true
! (NOT) true false를 반대값으로

반복문 loop

console.log(1); ~... 다 쓰기엔 너무나 많다

for 사용
(let i = 0; < 초기값 처음만 실행
i < 10;  조건 false가 되면 멈춤
i++) { 코드 실행 후 작업
console.log(i)
}
i = 0
i가 10보다 작으므로
코드 실행
i 값 1증가
i = 1
i 가 10 보다 작으므로
코드 실행
i 값 1증가 -> 반복

while
let i = 0;
while (i < 10) {
console.log(i);
i++;
}

do.. while

let i = 0;
do {
i++;
{ while (i < 10)

break continue

break 멈추고 빠져나옴

continue 멈추고 다음 반복으로 진행

switch

if else구문과 알아두면 좋음

함수(function)

function sayHello(name){
console.log('Hello, ${name}');
}

sayHello('Mike');

function = 함수 sayHello = 함수명
(name) = 매개변수

전역변수 지역변수

한번에 한작업 집중
읽기 쉽고 어떤 동작인지 알수 있게 네이밍 선정
showError // 에러를 보여줌
getName // 이름을 얻어옴
createUserData // 유저데이터 생성
checkLogin // 로그인 여부 체크

함수 선언문 함수 표현식

함수 선언문 어디서든 호출 가능

자바스크립트는 위에서 아래로 인터프리터 언어 이기에
선언된 함수를 미리 모아놓고 확인 호이스팅

함수 표현식 코드에 도달하면 생성

함수 선언문이 쓰기 편함

화살표 함수 arrow function

객체 Object

{} 키 값 , 구별

접근 . 사용 or [] 추가나 삭제할때도 가능
단축 프로퍼티 

for ...in 반복문

객체
method / this

method 객체 프로퍼티로 할당 된 함수

화살표 함수 일반 함수와 달리 자신만의 this 가지지 않음
화살표 내부에 this 사용시 그 this는 외부에서 값을 가짐

this

객체와 메소드 그 메소드 내부에 this

배열 Array

순서가 있는 리스트

[] , 사용 index 0부터 시작

특징

배열은 문자 뿐만 아닌 숫자 객체 함수 등도 포함 가능

length 배열의 길이를 구함
그 배열이 가지고 있는 요소의 개수를 반환함

배열은 몇가지 매소드를 가지고 있음

push() 배열 끝에 추가
pop() 배열 끝 요소 제거
shift, unshift 배열 앞에 제거 및 추가

반복문 for

배열을 쓰는 큰 이유는 반복문
for문을 사용하여 index와 활용

for ... of

let days = ["mon", "tue", "wed"]

days.push("thu"];
days.unshift("sun");

for (let index = 0; index < days.length: index++) {

for (let x of days) {

console.log(days);
}


---------------------------

변수 호이스팅 TDZ Temporal Dead Zone

변수

let const <-  es6부터 생김

var <- 이전

var는 한번 선언된 변수를 다시 지정이 가능함

let은 변수 지정 불가능

var 선언하기 전에 사용 가능

호이스팅 스코프 내부 어디서 변수 선언은 최상위에 선언된 것 처럼 행동

TDZ 안에는 변수 사용 불가능

할당 전에는 사용 불가능

변수 생성 과정

1 선언 단계
2 초기화 단계
3 할당 단계

var

1 선언 및 초기홛 나계
2 할당 단계

let

1 선언 단계
2 초기화 단계
3 할당 단계

const

1 선언 + 초기화 + 할당

var 함수 스코프 함수 내에서 선언된 변수만

let, const 블록 스코프 모든 코드 블록내에서 선언 된 변수
코드 블록 내에서만 유효하고 외부에서 접근 불가능
(함수, if 문, for 문, while 문, try/catch 문 등)

생성자 함수

객체 리터럴
